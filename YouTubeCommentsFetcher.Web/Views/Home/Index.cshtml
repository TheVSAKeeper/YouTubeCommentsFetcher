@model YouTubeCommentsViewModel

@{
    ViewData["Title"] = "Сборщик комментариев YouTube";
}

<div class="container py-4">
    <h1 class="display-4 text-center mb-5">@ViewData["Title"]</h1>

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show"
             role="alert">
            @TempData["Error"]
            <button type="button"
                    class="btn-close"
                    data-bs-dismiss="alert"
                    aria-label="Закрыть"></button>
        </div>
    }

    <!-- Статус пользователя -->
    <div id="userStatusCard"
         class="mb-3"
         style="display: none;">
        <div class="d-flex align-items-center justify-content-between p-3 bg-light rounded">
            <div class="d-flex align-items-center">
                <i class="fas fa-user text-muted me-2"></i>
                <span id="currentUser"
                      class="me-3"></span>
                <div id="authStatus"></div>
            </div>
            <div class="d-flex align-items-center">
                <span class="text-muted me-2">API:</span>
                <input type="text"
                       id="apiKey"
                       class="form-control form-control-sm me-2"
                       style="width: 300px;"
                       readonly
                       autocomplete="off">
                <button type="button"
                        id="editApiKey"
                        class="btn btn-outline-primary btn-sm me-1">
                    <i class="fas fa-edit"></i>
                </button>
                <button type="button"
                        id="saveApiKey"
                        class="btn btn-outline-success btn-sm me-1"
                        style="display: none;">
                    <i class="fas fa-save"></i>
                </button>
                <button type="button"
                        id="cancelEditApiKey"
                        class="btn btn-outline-secondary btn-sm me-1"
                        style="display: none;">
                    <i class="fas fa-times"></i>
                </button>
                <button type="button"
                        id="copyApiKey"
                        class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-copy"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Индикатор загрузки -->
    <div id="loadingIndicator"
         class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-body text-center">
                    <div class="spinner-border text-primary me-2"
                         role="status">
                        <span class="visually-hidden">Загрузка...</span>
                    </div>
                    <span>Инициализация пользователя...</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4><i class="fas fa-download me-2"></i>Сбор новых данных</h4>
                </div>
                <div class="card-body">
                    <form asp-action="FetchCommentsBackground"
                          method="post">
                        <div class="mb-3">
                            <label for="channelId"
                                   class="form-label">Идентификатор канала:</label>
                            <input type="text"
                                   id="channelId"
                                   name="channelId"
                                   class="form-control"
                                   required
                                   placeholder="UCXXXXXXX...">
                            <div class="form-text">Разработка: UCGNZ41YzeZuLHcEOGt835gA</div>
                            <div class="form-text">Игры: UCZp9nPW4L7PLNM67LOR6ApA</div>
                        </div>

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="pageSize"
                                       class="form-label">Макс. кол-во видео на станице:</label>
                                <input type="number"
                                       id="pageSize"
                                       name="pageSize"
                                       class="form-control"
                                       value="5"
                                       min="1"
                                       max="100">
                            </div>
                            <div class="col-md-6">
                                <label for="maxPages"
                                       class="form-label">Макс. кол-во страниц:</label>
                                <input type="number"
                                       id="maxPages"
                                       name="maxPages"
                                       class="form-control"
                                       value="1"
                                       min="1"
                                       max="100">
                            </div>
                        </div>

                        <button type="submit"
                                class="btn btn-primary mt-3">
                            <i class="fas fa-cloud-download-alt me-2"></i>Собрать комментарии
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h4><i class="fas fa-upload me-2"></i>Загрузка данных</h4>
                </div>
                <div class="card-body">
                    <form asp-action="LoadData"
                          method="post"
                          enctype="multipart/form-data">
                        <div class="mb-3">
                            <label class="form-label">Выберите JSON-файл:</label>
                            <input type="file"
                                   name="jsonFile"
                                   class="form-control"
                                   accept=".json"
                                   required>
                            <div class="form-text">Максимальный размер файла: 10 МБ</div>
                        </div>

                        <button type="submit"
                                class="btn btn-success">
                            <i class="fas fa-file-import me-2"></i>Загрузить данные
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Управление сохраненными результатами -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h4><i class="fas fa-database me-2"></i>Управление результатами</h4>
                </div>
                <div class="card-body text-center">
                    <p class="card-text">Просматривайте, управляйте и удаляйте сохраненные результаты выборки
                                         комментариев.</p>
                    <a asp-controller="FetchResults"
                       asp-action="Index"
                       class="btn btn-info btn-lg">
                        <i class="fas fa-list me-2"></i>Просмотреть все результаты
                    </a>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const apiKeyInput = document.getElementById('apiKey');
        const copyApiKeyButton = document.getElementById('copyApiKey');
        const editApiKeyButton = document.getElementById('editApiKey');
        const saveApiKeyButton = document.getElementById('saveApiKey');
        const cancelEditApiKeyButton = document.getElementById('cancelEditApiKey');
        const apiKeyDetails = document.getElementById('apiKeyDetails');
        const currentUserSpan = document.getElementById('currentUser');
        const authStatusDiv = document.getElementById('authStatus');
        const userStatusCard = document.getElementById('userStatusCard');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const functionalCards = document.querySelectorAll('.row.g-4, .row.mt-4');

        let originalApiKey = '';

        async function initializeUser() {
            const apiKey = getCookie('apiKey');
            if (apiKey) {
                const isValid = await validateApiKey(apiKey);
                if (isValid) {
                    hideLoadingAndShowUser();
                    return;
                }
            }

            await generateNewApiKey();
        }

        async function generateNewApiKey() {
            try {
                const response = await fetch('/api/auth/generate-key', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    setCookie('apiKey', result.apiKey);
                    if (apiKeyInput) {
                        apiKeyInput.value = result.apiKey;
                    }
                    currentUserSpan.textContent = `Пользователь: ${result.userName}`;
                    hideLoadingAndShowUser();
                    showFunctionalElements(true);
                    console.log('API ключ автоматически сгенерирован:', result.apiKey);
                } else {
                    console.error('Ошибка генерации API ключа');
                    showError('Ошибка инициализации пользователя');
                }
            } catch (error) {
                console.error('Ошибка при генерации API ключа:', error);
                showError('Ошибка подключения к серверу');
            }
        }

        function hideLoadingAndShowUser() {
            loadingIndicator.style.display = 'none';
            userStatusCard.style.display = 'block';
        }

        function showError(message) {
            loadingIndicator.innerHTML = `
            <div class="col-12">
                <div class="card shadow">
                    <div class="card-body text-center">
                        <div class="text-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            ${message}
                        </div>
                        <button type="button" class="btn btn-primary mt-2" onclick="location.reload()">
                            Попробовать снова
                        </button>
                    </div>
                </div>
            </div>
        `;
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        function setCookie(name, value, days = 30) {
            const expires = new Date();
            expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
            document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Lax`;
        }

        function deleteCookie(name) {
            document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
        }

        async function validateApiKey(apiKey) {
            if (!apiKey || apiKey.trim() === '') {
                return false;
            }

            const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            if (!guidRegex.test(apiKey)) {
                return false;
            }

            try {
                const response = await fetch('/api/auth/validate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-API-Key': apiKey
                    },
                    body: JSON.stringify({ apiKey })
                });

                if (response.ok) {
                    const userData = await response.json();
                    currentUserSpan.textContent = `Пользователь: ${userData.userName}`;
                    authStatusDiv.innerHTML = `
                    <div class="alert alert-success alert-sm" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        Аутентификация успешна
                    </div>
                `;
                    showFunctionalElements(true);
                    return true;
                } else {
                    return false;
                }
            } catch (error) {
                console.error('Ошибка валидации API ключа:', error);
                return false;
            }
        }

        function showFunctionalElements(show) {
            functionalCards.forEach(card => {
                card.style.display = show ? 'block' : 'none';
            });
        }

        // Обработчики для редактирования API ключа
        editApiKeyButton.addEventListener('click', function () {
            originalApiKey = apiKeyInput.value;
            apiKeyInput.removeAttribute('readonly');
            apiKeyInput.focus();
            apiKeyInput.select();

            editApiKeyButton.style.display = 'none';
            saveApiKeyButton.style.display = 'inline-block';
            cancelEditApiKeyButton.style.display = 'inline-block';
            copyApiKeyButton.style.display = 'none';
        });

        saveApiKeyButton.addEventListener('click', async function () {
            const newApiKey = apiKeyInput.value.trim();

            if (newApiKey === '') {
                alert('API ключ не может быть пустым');
                return;
            }

            // Проверяем формат GUID
            const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            if (!guidRegex.test(newApiKey)) {
                alert('API ключ должен быть в формате GUID');
                return;
            }

            // Валидируем новый ключ
            const isValid = await validateApiKey(newApiKey);
            if (isValid) {
                setCookie('apiKey', newApiKey);
                exitEditMode();
                showSuccessMessage('API ключ успешно изменен');
            } else {
                alert('Невалидный API ключ');
                apiKeyInput.value = originalApiKey;
            }
        });

        cancelEditApiKeyButton.addEventListener('click', function () {
            apiKeyInput.value = originalApiKey;
            exitEditMode();
        });

        function exitEditMode() {
            apiKeyInput.setAttribute('readonly', 'readonly');
            editApiKeyButton.style.display = 'inline-block';
            saveApiKeyButton.style.display = 'none';
            cancelEditApiKeyButton.style.display = 'none';
            copyApiKeyButton.style.display = 'inline-block';
        }

        function showSuccessMessage(message) {
            authStatusDiv.innerHTML = `
                <div class="alert alert-success alert-sm" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    ${message}
                </div>
            `;
        }

        copyApiKeyButton.addEventListener('click', async function () {
            try {
                await navigator.clipboard.writeText(apiKeyInput.value);
                copyApiKeyButton.innerHTML = '<i class="fas fa-check me-1"></i>Скопировано!';
                copyApiKeyButton.classList.remove('btn-outline-secondary');
                copyApiKeyButton.classList.add('btn-success');

                setTimeout(() => {
                    copyApiKeyButton.innerHTML = '<i class="fas fa-copy me-1"></i>Копировать';
                    copyApiKeyButton.classList.remove('btn-success');
                    copyApiKeyButton.classList.add('btn-outline-secondary');
                }, 2000);
            } catch (err) {
                console.error('Ошибка копирования:', err);
                // Fallback для старых браузеров
                apiKeyInput.select();
                document.execCommand('copy');
            }
        });

        showFunctionalElements(false);
        initializeUser();
    });
</script>

@model JobQueuedViewModel
@{
    ViewData["Title"] = "Обработка запроса";
}
<h2>Запрос поставлен в очередь</h2>
<p>Идентификатор задачи: <strong>@Model.JobId</strong></p>
<div style="margin-top:20px;">
    <label for="progress">Прогресс:</label>
    <progress id="progress"
              value="0"
              max="100"
              style="width: 100%; height: 24px;">
    </progress>
    <div id="progress-text"
         style="text-align: center; margin-top: 5px;">
        0%
    </div>
</div>

<p id="statusText">Ожидание завершения фоновой задачи...</p>

<script>
    const jobId = '@Model.JobId';
    const jsonUrl = '@Model.DataFileUrl';
    const progressBar = document.getElementById("progress");
    const progressText = document.getElementById("progress-text");
    const statusUrl = `/Home/GetJobStatus?jobId=${jobId}`;

    async function update() {
        try {
            const response = await fetch(statusUrl);
            const status = await response.json();

            progressBar.value = status.progress;
            progressText.innerText = `${status.progress}%`;

            if (status.completed) {
                const blob = await fetch(jsonUrl).then(x => x.blob());
                const file = new File([blob], '@Model.FileName', { type: 'application/json' });
                const formData = new FormData();
                formData.append('jsonFile', file);
                window.location.href = `/Home/LoadData?jobId=${jobId}`;
            } else {
                setTimeout(update, 2000);
            }
        } catch {
            setTimeout(update, 5000);
        }
    }

    update();
</script>
